manpage(buildpp)(1) () () ()

manpagename(buildpp) (A build system like make, but without makefiles)

manpagesynopsis()
bf(buildpp) [-clean] [-usecolours] [-verbose] [-girlie] [-test] targets
manpagedescription()
The purpose of buildpp.pl is to build source code into programs and libraries
(currently only programs are supported (tested)).
It is primarily intended for C and C++ but it should be possible to use other 
languages.
It is intended to support building the application under different systems,
currently Windows, Linux and MacOSX is tested, the requirements of the operation-system
are a "recent" version of perl and a compiler.

manpageoptions()
startdit()
dit(bf(-clean)) Removes all files in the build directory, all files will be 
remove without regard to whom made them. NEVER put any files in the build 
directory! The build directory is specified with em($buildDir) it defaults to
"em(build/)". If em($cleanConfirm) is true buildpp.pl will request you to confirm
the clean action, the default is em(1) (true).

dit(bf(-distcc)) Overwrites em($useDistcc) and sets it true.
Use distcc when compiling. Prefixes the compiler command with
"distcc ", if you don't set the number of threads to use with em(-j) it will count the
number of hosts in the environment variable em(DISTCC_HOSTS)
and uses this value.

dit(bf(-j)) Overwrites em($numberOfThreads), this is the number of threads to use
when compiling .o files. Useful when having more than one CPU or "cluster"
compiling.

dit(bf(-usecolours or -usecolors or -c)) Overwrites em($useColours) and sets it true.
Buildpp will colourise the output if em($useColours) is true,
the default is em(0) (false).

dit(bf(-verbose or -v)) Overwrites em($verbose) and sets it true.
Buildpp will output extra information if em($verbose) is true,
the default is em(0) (false).

dit(bf(-girlie)) Overwrites em($girlie) and sets it true.
Buildpp will tell you things you probably don't want to know if em($girlie)
is true, the default is em(0) (false).

dit(bf(-test)) Test the target after building it (it must be executable or
buildpp will look for its file in vane, complaining about it). If you specify
something like em(-test="Hello World") Hello World will be given on the
commandline to the target.
enddit()
manpagefiles()
bf(modulelist) contains a newline separated list of pathes where the code files
are stored. The pathes are searched recursively. A new feature is the possibility 
to specify paths that should't be searched, this is done by putting a ! in front of the path.
Exclusion paths must be specified before any inclusion pathes. If you wish to define an
inclusion path beginning with a ! write it like this ./!weirdPathName.
It is also important that the paths matches, "!src/brokenStuff" , "./src" won't work
as expected but "!./src/brokenStuff", "./src" and "!src/brokenStuff" , "src" will.

bf(localbuild.pl) Is read to determine the local build configuration,
allowing to configure things that are specific for a build under a certain
platform.
The file is read using bf(readConfigFile)

manpagesection(BUILDPP VARIABLES AND FUNCTIONS)
Here is a list of the internal variables and functions of buildpp
that you may change
in the localbuild.pl file or any file it includes with readConfigFile

bf(readConfigFile("filename")) Tries to reads an extra file and parse its contents,
it will only generate a warning if it can't find it.
However if the file fails to parse, buildpp.pl stops.

bf(autoTarget()) Tries to determine the OS we are running under and
sets bf($target) accordingly.

bf(%osHash) A hash from regEx's for OS names to $target values
(DEFAULT=see buildpp.pl)

bf($target) The current build target, empty for no specific target.
Usually set using bf(autoTarget()).
(DEFAULT="") bf(see CODE COMMENTS for more info).

bf(parseArguments()) Makes buildpp.pl read the arguments and options from the 
command line. buildpp.pl will call this if you don't. However it won't call it
if you have already called it. It is possible to call this function more that once
if needed. You only need to call this function if you modify bf(%argumentHash). 

bf(%argumentHash) The option that is feed to Getopt::Long when reading options.
Modify this to define your own options for buildpp.pl.
eg. em($argumentHash{"cross"} = \$crossCompile;) to define a new option -cross that sets
$crossCompile true when you call bf(parseArguments()).
See the perl documentation for Getopt::Long for more information (DEFAULT=see buildpp.pl)

bf($testProgram) The program used when testing exe files. You could set this to "wine " when
cross compiling to windows or "gdb " when compiling debug versions (DEFAULT="").

bf(COMPILING AND LINKING VARIABLES)

bf($lazyLinking) if lazyLinking is set true (1) you don't need to specify
link comments it links with everything that you #include "" with.
Inside the source code you may locally overwrite the global $lazyLinking variable
with bf(//#lazylinking on) or bf(//#lazylinking off) (DEFAULT=0).

bf($compiler) The program to use as a compiler (DEFAULT="g++").

bf($cflags) The default flags used when compiling code into object files
(DEFAULT="-c -Wall ") see bf(CODE COMMENTS) for more info.

bf($ignoreMissingCodeFiles) If true missing code files will be ignored when lazylinking, this can be useful if the project uses header files that dosen't have a code file implementing anything. The normal buildpp.pl behaviour would be to consider missing code files an error and insist on blank code files for headers without code (DEFAULT=0).

bf($includeSuffix) Defines the suffixes that if included with
#include "" will become part of the dependencies.
Used in a regEx therefore the weird syntax
(DEFAULT="\\.h|\\.cpp").

bf($codeSuffix) The suffix that your code files have, DON'T put a dot
in front (DEFAULT="cpp").

bf($objectSuffix) The suffix to put after object files, DON'T put a
dot in front (DEFAULT="o").

bf($linker) The program to use as a linker (DEFAULT="g++")
see bf(CODE COMMENTS) for more info.

bf($ldflags) The default flags used when linking object files together
(DEFAULT="") see bf(CODE COMMENTS) for more info.

bf($exeSuffix) The suffix to put after executable files, DON'T put a
dot in front (DEFAULT="").

bf($buildDir) The dir where buildpp.pl generates files (.o .exe and .d files)
if it dos't exist it will be created. WARNING ALL files here
will be deleted on clean! (DEFAULT="build/").

bf($cleanConfirm) If true you are requested to confirm when cleaning
(DEFAULT=1).

bf($useDistcc) If true all compile commands will be prefixed with 
"distcc " (DEFAULT=0), additional if bf($numberOfThreads)
has't been set it will
be set to the number of hosts in the environment variable
em(DISTCC_HOSTS)

bf($newTargetClean) If true a change in build target will trigger 
a clean operation (DEFAULT=0), this is useful if the choice of
target may change the way files are compiled. When using this you
may want to use em($cleanConfirm=0) as well.

bf($numberOfThreads) The number of threads to use when compiling
object files (DEFAULT=1)

bf($warnDuplicateFiles) If true buildpp will warn the user of files that
has the same names in the search path, this can be fixed by ignoring
the unwanted path in "modulelist" (DEFAULT=1)

bf(LANGUAGE SERVERS)

Buildpp supports generating a language server configuration file (currently for ccls),
the file will be build each time buildpp builds a target.
Hence after you have build a target the language server config matches that target


bf($languageServerTemplateFile) name of the file containing the template for the language server config file,
if not empty buildpp will generate a config. Suggested name ".ccls_template".
The template file often just contains line specifying compiler then a line with
the content "%%%include_path%%%" (DEFAULT="")

bf($languageServerOutputFile) the name of the file where the config will be written,
may in the future be used to detect the type of language server (DEFAULT=".ccls")

bf($languageServerIncludePathKeyword) defines the text that will be replaced by the compiler options inside the template file
(DEFAULT="%%%include_path%%%")

bf(CALLBACKS)

bf($postProcessingRef) is a reference to a function that is called
for each executable file created.
This could for instance be used to call strip on your executables
when generating release versions.
See the default function in buildpp.pl for arguments.
(DEFAULT=\&defaultPostProcessing)

bf($autoProcessingRef) is a reference to a function that is called for 
each file with a .auto suffix found during the first
"em(Reading module list and compiling file list)"
parse.
The default behaviour is to try to execute the file
See the default function in buildpp.pl for arguments.
(DEFAULT=\&defaultAutoProcessing)

bf($beforeCompileRunRef) is a reference to a function that is called just
prior to building files.
It is primarily intended to handle //#global_cflags implications.
For instance a target might request to be compiled for a specific CPU/MCU
this in turn may require the compilere options of the compiler it self to
be changed. (DEFAULT=\&defaultBeforeCompileRunFunction)

bf(DISPLAY CONTROLS)

bf($colourVerbose),
bf($colourNormal), 
bf($colourError), 
bf($colourAction), 
bf($colourExternal), 
bf($colourWarning), 
bf($colourGirlie)
Colour definitions for different types of output
(DEFAULTS
$colourVerbose = "\033[33m",
$colourNormal = "\033[37;40m",
$colourError = "\033[33;41m",
$colourAction = "\033[32m",
$colourExternal = "\033[36m"
$colourWarning = "\033[33m",
$colourGirlie = "\033[35m"
)

bf($useColours) See bf(-usecolours). If false the colour entries will not be used, note
that it is not all terminals that understands the colour codes (DEFAULT=0). 

bf($verbose) Displays lots of information if true (DEFAULT=0).

bf($girlie) If true displays information that you normally don't
need nor want (DEFAULT=0).

bf($showCompilerCommand) If true always shows the command used for
compilation (else just on error) (DEFAULT=0).

bf($showLinkerCommand) If true always shows the command used for linking
(else just on error) (DEFAULT=0).

manpageauthor()
Visti Andresen (sftalpa at users.sourceforge.net)
